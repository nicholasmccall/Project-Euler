# Problem 2:
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

###################### Solution Comments #############################
# Calculates the fibonacci numbers range from 1 to N.  If the number is
# divisible by 2 with no remainder we know it's even and add it to our
# running sum.

def sum_fibonacci_evens(maximum_value: int) -> int:
    """
    Sums each even Fibonacci number up to the specified maximum value

    :param maximum_value:
    :return:
    """

    running_sum = 0

    previous_number = 0
    current_number = 1

    while current_number < maximum_value:

        if current_number % 2 == 0:
            running_sum += current_number

        new_current_number = current_number + previous_number
        previous_number = current_number
        current_number = new_current_number

    return running_sum


if __name__ == '__main__':
    print(sum_fibonacci_evens(4000000))